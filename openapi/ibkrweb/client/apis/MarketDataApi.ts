// @ts-nocheck
/* eslint-disable */
/**
 * Client Portal Web API
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import {
  HistoryData,
  HistoryDataFromJSON,
  HistoryDataToJSON,
  InlineResponse20022,
  InlineResponse20022FromJSON,
  InlineResponse20022ToJSON,
  InlineResponse20023,
  InlineResponse20023FromJSON,
  InlineResponse20023ToJSON,
  InlineResponse20024,
  InlineResponse20024FromJSON,
  InlineResponse20024ToJSON,
  InlineResponse4001,
  InlineResponse4001FromJSON,
  InlineResponse4001ToJSON,
  InlineResponse429,
  InlineResponse429FromJSON,
  InlineResponse429ToJSON,
  SystemError,
  SystemErrorFromJSON,
  SystemErrorToJSON,
} from '../models'

export interface IserverMarketdataConidUnsubscribeGetRequest {
  conid: string
}

export interface IserverMarketdataHistoryGetRequest {
  conid: string
  period: string
  exchange?: string
  bar?: string
  outsideRth?: boolean
}

export interface IserverMarketdataSnapshotGetRequest {
  conids: string
  since?: number
  fields?: string
}

/**
 *
 */
export class MarketDataApi extends runtime.BaseAPI {
  /**
   * Cancel market data for given conid. To cancel all market data request(s), see /iserver/marketdata/unsubscribeall.
   * Market Data Cancel (Single)
   */
  async iserverMarketdataConidUnsubscribeGetRaw(
    requestParameters: IserverMarketdataConidUnsubscribeGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse20023>> {
    if (
      requestParameters.conid === null ||
      requestParameters.conid === undefined
    ) {
      throw new runtime.RequiredError(
        'conid',
        'Required parameter requestParameters.conid was null or undefined when calling iserverMarketdataConidUnsubscribeGet.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/iserver/marketdata/{conid}/unsubscribe`.replace(
          `{${'conid'}}`,
          encodeURIComponent(String(requestParameters.conid))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse20023FromJSON(jsonValue)
    )
  }

  /**
   * Cancel market data for given conid. To cancel all market data request(s), see /iserver/marketdata/unsubscribeall.
   * Market Data Cancel (Single)
   */
  async iserverMarketdataConidUnsubscribeGet(
    requestParameters: IserverMarketdataConidUnsubscribeGetRequest,
    initOverrides?: RequestInit
  ): Promise<InlineResponse20023> {
    const response = await this.iserverMarketdataConidUnsubscribeGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get historical market Data for given conid, length of data is controlled by \'period\' and \'bar\'. Formatted as: min=minute, h=hour, d=day, w=week, m=month, y=year e.g. period =1y with bar =1w returns 52 data points (Max of 1000 data points supported). **Note**: There\'s a limit of 5 concurrent requests. Excessive requests will return a \'Too many requests\' status 429 response.
   * Market Data History
   */
  async iserverMarketdataHistoryGetRaw(
    requestParameters: IserverMarketdataHistoryGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<HistoryData>> {
    if (
      requestParameters.conid === null ||
      requestParameters.conid === undefined
    ) {
      throw new runtime.RequiredError(
        'conid',
        'Required parameter requestParameters.conid was null or undefined when calling iserverMarketdataHistoryGet.'
      )
    }

    if (
      requestParameters.period === null ||
      requestParameters.period === undefined
    ) {
      throw new runtime.RequiredError(
        'period',
        'Required parameter requestParameters.period was null or undefined when calling iserverMarketdataHistoryGet.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.conid !== undefined) {
      queryParameters['conid'] = requestParameters.conid
    }

    if (requestParameters.exchange !== undefined) {
      queryParameters['exchange'] = requestParameters.exchange
    }

    if (requestParameters.period !== undefined) {
      queryParameters['period'] = requestParameters.period
    }

    if (requestParameters.bar !== undefined) {
      queryParameters['bar'] = requestParameters.bar
    }

    if (requestParameters.outsideRth !== undefined) {
      queryParameters['outsideRth'] = requestParameters.outsideRth
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/iserver/marketdata/history`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      HistoryDataFromJSON(jsonValue)
    )
  }

  /**
   * Get historical market Data for given conid, length of data is controlled by \'period\' and \'bar\'. Formatted as: min=minute, h=hour, d=day, w=week, m=month, y=year e.g. period =1y with bar =1w returns 52 data points (Max of 1000 data points supported). **Note**: There\'s a limit of 5 concurrent requests. Excessive requests will return a \'Too many requests\' status 429 response.
   * Market Data History
   */
  async iserverMarketdataHistoryGet(
    requestParameters: IserverMarketdataHistoryGetRequest,
    initOverrides?: RequestInit
  ): Promise<HistoryData> {
    const response = await this.iserverMarketdataHistoryGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get Market Data for the given conid(s). The endpoint will return by default bid, ask, last, change, change pct, close, listing exchange. See response fields for a list of available fields that can be request via fields argument. The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot. For derivative contracts the endpoint /iserver/secdef/search must be called first. First /snapshot endpoint call for given conid will initiate the market data request.  To receive all available fields the /snapshot endpoint will need to be called several times. To receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
   * Market Data
   */
  async iserverMarketdataSnapshotGetRaw(
    requestParameters: IserverMarketdataSnapshotGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<InlineResponse20022>>> {
    if (
      requestParameters.conids === null ||
      requestParameters.conids === undefined
    ) {
      throw new runtime.RequiredError(
        'conids',
        'Required parameter requestParameters.conids was null or undefined when calling iserverMarketdataSnapshotGet.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.conids !== undefined) {
      queryParameters['conids'] = requestParameters.conids
    }

    if (requestParameters.since !== undefined) {
      queryParameters['since'] = requestParameters.since
    }

    if (requestParameters.fields !== undefined) {
      queryParameters['fields'] = requestParameters.fields
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/iserver/marketdata/snapshot`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(InlineResponse20022FromJSON)
    )
  }

  /**
   * Get Market Data for the given conid(s). The endpoint will return by default bid, ask, last, change, change pct, close, listing exchange. See response fields for a list of available fields that can be request via fields argument. The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot. For derivative contracts the endpoint /iserver/secdef/search must be called first. First /snapshot endpoint call for given conid will initiate the market data request.  To receive all available fields the /snapshot endpoint will need to be called several times. To receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
   * Market Data
   */
  async iserverMarketdataSnapshotGet(
    requestParameters: IserverMarketdataSnapshotGetRequest,
    initOverrides?: RequestInit
  ): Promise<Array<InlineResponse20022>> {
    const response = await this.iserverMarketdataSnapshotGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Cancel all market data request(s). To cancel market data for given conid, see /iserver/marketdata/{conid}/unsubscribe.
   * Market Data Cancel (All)
   */
  async iserverMarketdataUnsubscribeallGetRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse20024>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/iserver/marketdata/unsubscribeall`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse20024FromJSON(jsonValue)
    )
  }

  /**
   * Cancel all market data request(s). To cancel market data for given conid, see /iserver/marketdata/{conid}/unsubscribe.
   * Market Data Cancel (All)
   */
  async iserverMarketdataUnsubscribeallGet(
    initOverrides?: RequestInit
  ): Promise<InlineResponse20024> {
    const response = await this.iserverMarketdataUnsubscribeallGetRaw(
      initOverrides
    )
    return await response.value()
  }
}
