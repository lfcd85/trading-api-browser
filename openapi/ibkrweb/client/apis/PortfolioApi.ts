// @ts-nocheck
/* eslint-disable */
/**
 * Client Portal Web API
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  Account,
  AccountFromJSON,
  AccountToJSON,
  InlineObject10,
  InlineObject10FromJSON,
  InlineObject10ToJSON,
  InlineResponse20035,
  InlineResponse20035FromJSON,
  InlineResponse20035ToJSON,
  InlineResponse20036,
  InlineResponse20036FromJSON,
  InlineResponse20036ToJSON,
  InlineResponse20037,
  InlineResponse20037FromJSON,
  InlineResponse20037ToJSON,
} from "../models";

export interface PortfolioAccountIdAllocationGetRequest {
  accountId: string;
}

export interface PortfolioAccountIdLedgerGetRequest {
  accountId: string;
}

export interface PortfolioAccountIdMetaGetRequest {
  accountId: string;
}

export interface PortfolioAccountIdPositionConidGetRequest {
  accountId: string;
  conid: number;
}

export interface PortfolioAccountIdPositionsInvalidatePostRequest {
  accountId: string;
}

export interface PortfolioAccountIdPositionsPageIdGetRequest {
  accountId: string;
  pageId: string;
  model?: string;
  sort?: string;
  direction?: string;
  period?: string;
}

export interface PortfolioAccountIdSummaryGetRequest {
  accountId: string;
}

export interface PortfolioAllocationPostRequest {
  body: InlineObject10;
}

export interface PortfolioPositionsConidGetRequest {
  conid: number;
}

/**
 *
 */
export class PortfolioApi extends runtime.BaseAPI {
  /**
   * Information about the account\'s portfolio allocation by Asset Class, Industry and Category.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
   * Account Allocation
   */
  async portfolioAccountIdAllocationGetRaw(
    requestParameters: PortfolioAccountIdAllocationGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<object>>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling portfolioAccountIdAllocationGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/portfolio/{accountId}/allocation`.replace(
          `{${"accountId"}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Information about the account\'s portfolio allocation by Asset Class, Industry and Category.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
   * Account Allocation
   */
  async portfolioAccountIdAllocationGet(
    requestParameters: PortfolioAccountIdAllocationGetRequest,
    initOverrides?: RequestInit
  ): Promise<Array<object>> {
    const response = await this.portfolioAccountIdAllocationGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Information regarding settled cash, cash balances, etc. in the account\'s base currency and any other cash balances hold in other currencies.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. The list of supported currencies is available at https://www.interactivebrokers.com/en/index.php?f=3185.
   * Account Ledger
   */
  async portfolioAccountIdLedgerGetRaw(
    requestParameters: PortfolioAccountIdLedgerGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse20036>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling portfolioAccountIdLedgerGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/portfolio/{accountId}/ledger`.replace(
          `{${"accountId"}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse20036FromJSON(jsonValue)
    );
  }

  /**
   * Information regarding settled cash, cash balances, etc. in the account\'s base currency and any other cash balances hold in other currencies.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. The list of supported currencies is available at https://www.interactivebrokers.com/en/index.php?f=3185.
   * Account Ledger
   */
  async portfolioAccountIdLedgerGet(
    requestParameters: PortfolioAccountIdLedgerGetRequest,
    initOverrides?: RequestInit
  ): Promise<InlineResponse20036> {
    const response = await this.portfolioAccountIdLedgerGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Account information related to account Id /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
   * Account Information
   */
  async portfolioAccountIdMetaGetRaw(
    requestParameters: PortfolioAccountIdMetaGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<Account>>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling portfolioAccountIdMetaGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/portfolio/{accountId}/meta`.replace(
          `{${"accountId"}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(AccountFromJSON)
    );
  }

  /**
   * Account information related to account Id /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
   * Account Information
   */
  async portfolioAccountIdMetaGet(
    requestParameters: PortfolioAccountIdMetaGetRequest,
    initOverrides?: RequestInit
  ): Promise<Array<Account>> {
    const response = await this.portfolioAccountIdMetaGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Returns a list of all positions matching the conid. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
   * Position by Conid
   */
  async portfolioAccountIdPositionConidGetRaw(
    requestParameters: PortfolioAccountIdPositionConidGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<object>>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling portfolioAccountIdPositionConidGet."
      );
    }

    if (
      requestParameters.conid === null ||
      requestParameters.conid === undefined
    ) {
      throw new runtime.RequiredError(
        "conid",
        "Required parameter requestParameters.conid was null or undefined when calling portfolioAccountIdPositionConidGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/portfolio/{accountId}/position/{conid}`
          .replace(
            `{${"accountId"}}`,
            encodeURIComponent(String(requestParameters.accountId))
          )
          .replace(
            `{${"conid"}}`,
            encodeURIComponent(String(requestParameters.conid))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Returns a list of all positions matching the conid. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
   * Position by Conid
   */
  async portfolioAccountIdPositionConidGet(
    requestParameters: PortfolioAccountIdPositionConidGetRequest,
    initOverrides?: RequestInit
  ): Promise<Array<object>> {
    const response = await this.portfolioAccountIdPositionConidGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Invalidates the backend cache of the Portfolio
   */
  async portfolioAccountIdPositionsInvalidatePostRaw(
    requestParameters: PortfolioAccountIdPositionsInvalidatePostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<object>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling portfolioAccountIdPositionsInvalidatePost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/portfolio/{accountId}/positions/invalidate`.replace(
          `{${"accountId"}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Invalidates the backend cache of the Portfolio
   */
  async portfolioAccountIdPositionsInvalidatePost(
    requestParameters: PortfolioAccountIdPositionsInvalidatePostRequest,
    initOverrides?: RequestInit
  ): Promise<object> {
    const response = await this.portfolioAccountIdPositionsInvalidatePostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Returns a list of positions for the given account. The endpoint supports paging, page\'s default size is 30 positions. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
   * Portfolio Positions
   */
  async portfolioAccountIdPositionsPageIdGetRaw(
    requestParameters: PortfolioAccountIdPositionsPageIdGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<object>>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling portfolioAccountIdPositionsPageIdGet."
      );
    }

    if (
      requestParameters.pageId === null ||
      requestParameters.pageId === undefined
    ) {
      throw new runtime.RequiredError(
        "pageId",
        "Required parameter requestParameters.pageId was null or undefined when calling portfolioAccountIdPositionsPageIdGet."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.model !== undefined) {
      queryParameters["model"] = requestParameters.model;
    }

    if (requestParameters.sort !== undefined) {
      queryParameters["sort"] = requestParameters.sort;
    }

    if (requestParameters.direction !== undefined) {
      queryParameters["direction"] = requestParameters.direction;
    }

    if (requestParameters.period !== undefined) {
      queryParameters["period"] = requestParameters.period;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/portfolio/{accountId}/positions/{pageId}`
          .replace(
            `{${"accountId"}}`,
            encodeURIComponent(String(requestParameters.accountId))
          )
          .replace(
            `{${"pageId"}}`,
            encodeURIComponent(String(requestParameters.pageId))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Returns a list of positions for the given account. The endpoint supports paging, page\'s default size is 30 positions. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
   * Portfolio Positions
   */
  async portfolioAccountIdPositionsPageIdGet(
    requestParameters: PortfolioAccountIdPositionsPageIdGetRequest,
    initOverrides?: RequestInit
  ): Promise<Array<object>> {
    const response = await this.portfolioAccountIdPositionsPageIdGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Returns information about margin, cash balances and other information related to specified account. See also /portfolio/{accountId}/ledger. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
   * Account Summary
   */
  async portfolioAccountIdSummaryGetRaw(
    requestParameters: PortfolioAccountIdSummaryGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse20035>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling portfolioAccountIdSummaryGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/portfolio/{accountId}/summary`.replace(
          `{${"accountId"}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse20035FromJSON(jsonValue)
    );
  }

  /**
   * Returns information about margin, cash balances and other information related to specified account. See also /portfolio/{accountId}/ledger. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
   * Account Summary
   */
  async portfolioAccountIdSummaryGet(
    requestParameters: PortfolioAccountIdSummaryGetRequest,
    initOverrides?: RequestInit
  ): Promise<InlineResponse20035> {
    const response = await this.portfolioAccountIdSummaryGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * In non-tiered account structures, returns a list of accounts for which the user can view position and account information. This endpoint must be called prior  to calling other /portfolio endpoints for those accounts. For querying a list of accounts  which the user can trade, see /iserver/accounts. For a list of subaccounts in tiered  account structures (e.g. financial advisor or ibroker accounts) see /portfolio/subaccounts.
   * Portfolio Accounts
   */
  async portfolioAccountsGetRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<Account>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/portfolio/accounts`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(AccountFromJSON)
    );
  }

  /**
   * In non-tiered account structures, returns a list of accounts for which the user can view position and account information. This endpoint must be called prior  to calling other /portfolio endpoints for those accounts. For querying a list of accounts  which the user can trade, see /iserver/accounts. For a list of subaccounts in tiered  account structures (e.g. financial advisor or ibroker accounts) see /portfolio/subaccounts.
   * Portfolio Accounts
   */
  async portfolioAccountsGet(
    initOverrides?: RequestInit
  ): Promise<Array<Account>> {
    const response = await this.portfolioAccountsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Similar to /portfolio/{accountId}/allocation but returns a consolidated view of of all the accounts returned by /portfolio/accounts. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
   * Account Alloction (All Accounts)
   */
  async portfolioAllocationPostRaw(
    requestParameters: PortfolioAllocationPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<object>>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        "body",
        "Required parameter requestParameters.body was null or undefined when calling portfolioAllocationPost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/portfolio/allocation`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: InlineObject10ToJSON(requestParameters.body),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Similar to /portfolio/{accountId}/allocation but returns a consolidated view of of all the accounts returned by /portfolio/accounts. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
   * Account Alloction (All Accounts)
   */
  async portfolioAllocationPost(
    requestParameters: PortfolioAllocationPostRequest,
    initOverrides?: RequestInit
  ): Promise<Array<object>> {
    const response = await this.portfolioAllocationPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Returns an object of all positions matching the conid for all the selected accounts. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
   * Positions by Conid
   */
  async portfolioPositionsConidGetRaw(
    requestParameters: PortfolioPositionsConidGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse20037>> {
    if (
      requestParameters.conid === null ||
      requestParameters.conid === undefined
    ) {
      throw new runtime.RequiredError(
        "conid",
        "Required parameter requestParameters.conid was null or undefined when calling portfolioPositionsConidGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/portfolio/positions/{conid}`.replace(
          `{${"conid"}}`,
          encodeURIComponent(String(requestParameters.conid))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse20037FromJSON(jsonValue)
    );
  }

  /**
   * Returns an object of all positions matching the conid for all the selected accounts. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
   * Positions by Conid
   */
  async portfolioPositionsConidGet(
    requestParameters: PortfolioPositionsConidGetRequest,
    initOverrides?: RequestInit
  ): Promise<InlineResponse20037> {
    const response = await this.portfolioPositionsConidGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Used in tiered account structures (such as financial advisor and ibroker accounts)  to return a list of sub-accounts for which the user can view position and  account-related information. This endpoint must be called prior to calling other  /portfolio endpoints for those subaccounts.  To query a list of accounts the user can trade, see /iserver/accounts.
   * List of Sub-Accounts
   */
  async portfolioSubaccountsGetRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Account>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/portfolio/subaccounts`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AccountFromJSON(jsonValue)
    );
  }

  /**
   * Used in tiered account structures (such as financial advisor and ibroker accounts)  to return a list of sub-accounts for which the user can view position and  account-related information. This endpoint must be called prior to calling other  /portfolio endpoints for those subaccounts.  To query a list of accounts the user can trade, see /iserver/accounts.
   * List of Sub-Accounts
   */
  async portfolioSubaccountsGet(initOverrides?: RequestInit): Promise<Account> {
    const response = await this.portfolioSubaccountsGetRaw(initOverrides);
    return await response.value();
  }
}
