/* tslint:disable */
/* eslint-disable */
/**
 * Client Portal Web API
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  InlineObject,
  InlineObjectFromJSON,
  InlineObjectToJSON,
  InlineObject1,
  InlineObject1FromJSON,
  InlineObject1ToJSON,
  InlineResponse2002,
  InlineResponse2002FromJSON,
  InlineResponse2002ToJSON,
  InlineResponse2003,
  InlineResponse2003FromJSON,
  InlineResponse2003ToJSON,
  InlineResponse2004,
  InlineResponse2004FromJSON,
  InlineResponse2004ToJSON,
  InlineResponse2005,
  InlineResponse2005FromJSON,
  InlineResponse2005ToJSON,
  InlineResponse2006,
  InlineResponse2006FromJSON,
  InlineResponse2006ToJSON,
} from "../models";

export interface FyiDeliveryoptionsDeviceIdDeleteRequest {
  deviceId: string;
}

export interface FyiDeliveryoptionsDevicePostRequest {
  body: InlineObject1;
}

export interface FyiDeliveryoptionsEmailPutRequest {
  enabled: string;
}

export interface FyiDisclaimerTypecodeGetRequest {
  typecode: string;
}

export interface FyiDisclaimerTypecodePutRequest {
  typecode: string;
}

export interface FyiNotificationsGetRequest {
  max: string;
  exclude?: string;
  include?: string;
}

export interface FyiNotificationsMoreGetRequest {
  id: string;
}

export interface FyiNotificationsNotificationIdPutRequest {
  notificationId: string;
}

export interface FyiSettingsTypecodePostRequest {
  typecode: string;
  body: InlineObject;
}

/**
 *
 */
export class FYIApi extends runtime.BaseAPI {
  /**
   * Delete a device
   */
  async fyiDeliveryoptionsDeviceIdDeleteRaw(
    requestParameters: FyiDeliveryoptionsDeviceIdDeleteRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<object>> {
    if (
      requestParameters.deviceId === null ||
      requestParameters.deviceId === undefined
    ) {
      throw new runtime.RequiredError(
        "deviceId",
        "Required parameter requestParameters.deviceId was null or undefined when calling fyiDeliveryoptionsDeviceIdDelete."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/fyi/deliveryoptions/{deviceId}`.replace(
          `{${"deviceId"}}`,
          encodeURIComponent(String(requestParameters.deviceId))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Delete a device
   */
  async fyiDeliveryoptionsDeviceIdDelete(
    requestParameters: FyiDeliveryoptionsDeviceIdDeleteRequest,
    initOverrides?: RequestInit
  ): Promise<object> {
    const response = await this.fyiDeliveryoptionsDeviceIdDeleteRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Enable/Disable device option
   */
  async fyiDeliveryoptionsDevicePostRaw(
    requestParameters: FyiDeliveryoptionsDevicePostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse2005>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        "body",
        "Required parameter requestParameters.body was null or undefined when calling fyiDeliveryoptionsDevicePost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/fyi/deliveryoptions/device`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: InlineObject1ToJSON(requestParameters.body),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse2005FromJSON(jsonValue)
    );
  }

  /**
   * Enable/Disable device option
   */
  async fyiDeliveryoptionsDevicePost(
    requestParameters: FyiDeliveryoptionsDevicePostRequest,
    initOverrides?: RequestInit
  ): Promise<InlineResponse2005> {
    const response = await this.fyiDeliveryoptionsDevicePostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Enable/Disable email option
   */
  async fyiDeliveryoptionsEmailPutRaw(
    requestParameters: FyiDeliveryoptionsEmailPutRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse2005>> {
    if (
      requestParameters.enabled === null ||
      requestParameters.enabled === undefined
    ) {
      throw new runtime.RequiredError(
        "enabled",
        "Required parameter requestParameters.enabled was null or undefined when calling fyiDeliveryoptionsEmailPut."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.enabled !== undefined) {
      queryParameters["enabled"] = requestParameters.enabled;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/fyi/deliveryoptions/email`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse2005FromJSON(jsonValue)
    );
  }

  /**
   * Enable/Disable email option
   */
  async fyiDeliveryoptionsEmailPut(
    requestParameters: FyiDeliveryoptionsEmailPutRequest,
    initOverrides?: RequestInit
  ): Promise<InlineResponse2005> {
    const response = await this.fyiDeliveryoptionsEmailPutRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * options for sending fyis to email and other devices
   * Get delivery options
   */
  async fyiDeliveryoptionsGetRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse2006>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/fyi/deliveryoptions`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse2006FromJSON(jsonValue)
    );
  }

  /**
   * options for sending fyis to email and other devices
   * Get delivery options
   */
  async fyiDeliveryoptionsGet(
    initOverrides?: RequestInit
  ): Promise<InlineResponse2006> {
    const response = await this.fyiDeliveryoptionsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get disclaimer for a certain kind of fyi
   */
  async fyiDisclaimerTypecodeGetRaw(
    requestParameters: FyiDisclaimerTypecodeGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse2004>> {
    if (
      requestParameters.typecode === null ||
      requestParameters.typecode === undefined
    ) {
      throw new runtime.RequiredError(
        "typecode",
        "Required parameter requestParameters.typecode was null or undefined when calling fyiDisclaimerTypecodeGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/fyi/disclaimer/{typecode}`.replace(
          `{${"typecode"}}`,
          encodeURIComponent(String(requestParameters.typecode))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse2004FromJSON(jsonValue)
    );
  }

  /**
   * Get disclaimer for a certain kind of fyi
   */
  async fyiDisclaimerTypecodeGet(
    requestParameters: FyiDisclaimerTypecodeGetRequest,
    initOverrides?: RequestInit
  ): Promise<InlineResponse2004> {
    const response = await this.fyiDisclaimerTypecodeGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Mark disclaimer read
   */
  async fyiDisclaimerTypecodePutRaw(
    requestParameters: FyiDisclaimerTypecodePutRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse2005>> {
    if (
      requestParameters.typecode === null ||
      requestParameters.typecode === undefined
    ) {
      throw new runtime.RequiredError(
        "typecode",
        "Required parameter requestParameters.typecode was null or undefined when calling fyiDisclaimerTypecodePut."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/fyi/disclaimer/{typecode}`.replace(
          `{${"typecode"}}`,
          encodeURIComponent(String(requestParameters.typecode))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse2005FromJSON(jsonValue)
    );
  }

  /**
   * Mark disclaimer read
   */
  async fyiDisclaimerTypecodePut(
    requestParameters: FyiDisclaimerTypecodePutRequest,
    initOverrides?: RequestInit
  ): Promise<InlineResponse2005> {
    const response = await this.fyiDisclaimerTypecodePutRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get a list of notifications
   */
  async fyiNotificationsGetRaw(
    requestParameters: FyiNotificationsGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<object>>> {
    if (requestParameters.max === null || requestParameters.max === undefined) {
      throw new runtime.RequiredError(
        "max",
        "Required parameter requestParameters.max was null or undefined when calling fyiNotificationsGet."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.exclude !== undefined) {
      queryParameters["exclude"] = requestParameters.exclude;
    }

    if (requestParameters.include !== undefined) {
      queryParameters["include"] = requestParameters.include;
    }

    if (requestParameters.max !== undefined) {
      queryParameters["max"] = requestParameters.max;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/fyi/notifications`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get a list of notifications
   */
  async fyiNotificationsGet(
    requestParameters: FyiNotificationsGetRequest,
    initOverrides?: RequestInit
  ): Promise<Array<object>> {
    const response = await this.fyiNotificationsGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get more notifications based on a certain one
   */
  async fyiNotificationsMoreGetRaw(
    requestParameters: FyiNotificationsMoreGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<object>>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling fyiNotificationsMoreGet."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.id !== undefined) {
      queryParameters["id"] = requestParameters.id;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/fyi/notifications/more`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get more notifications based on a certain one
   */
  async fyiNotificationsMoreGet(
    requestParameters: FyiNotificationsMoreGetRequest,
    initOverrides?: RequestInit
  ): Promise<Array<object>> {
    const response = await this.fyiNotificationsMoreGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get a list of notifications
   */
  async fyiNotificationsNotificationIdPutRaw(
    requestParameters: FyiNotificationsNotificationIdPutRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<object>> {
    if (
      requestParameters.notificationId === null ||
      requestParameters.notificationId === undefined
    ) {
      throw new runtime.RequiredError(
        "notificationId",
        "Required parameter requestParameters.notificationId was null or undefined when calling fyiNotificationsNotificationIdPut."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/fyi/notifications/{notificationId}`.replace(
          `{${"notificationId"}}`,
          encodeURIComponent(String(requestParameters.notificationId))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get a list of notifications
   */
  async fyiNotificationsNotificationIdPut(
    requestParameters: FyiNotificationsNotificationIdPutRequest,
    initOverrides?: RequestInit
  ): Promise<object> {
    const response = await this.fyiNotificationsNotificationIdPutRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Return the current choices of subscriptions, we can toggle the option
   * Get a list of subscriptions
   */
  async fyiSettingsGetRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<InlineResponse2003>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/fyi/settings`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(InlineResponse2003FromJSON)
    );
  }

  /**
   * Return the current choices of subscriptions, we can toggle the option
   * Get a list of subscriptions
   */
  async fyiSettingsGet(
    initOverrides?: RequestInit
  ): Promise<Array<InlineResponse2003>> {
    const response = await this.fyiSettingsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Configure which typecode you would like to enable/disable.
   * Enable/Disable certain subscription
   */
  async fyiSettingsTypecodePostRaw(
    requestParameters: FyiSettingsTypecodePostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<object>> {
    if (
      requestParameters.typecode === null ||
      requestParameters.typecode === undefined
    ) {
      throw new runtime.RequiredError(
        "typecode",
        "Required parameter requestParameters.typecode was null or undefined when calling fyiSettingsTypecodePost."
      );
    }

    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        "body",
        "Required parameter requestParameters.body was null or undefined when calling fyiSettingsTypecodePost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/fyi/settings/{typecode}`.replace(
          `{${"typecode"}}`,
          encodeURIComponent(String(requestParameters.typecode))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: InlineObjectToJSON(requestParameters.body),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Configure which typecode you would like to enable/disable.
   * Enable/Disable certain subscription
   */
  async fyiSettingsTypecodePost(
    requestParameters: FyiSettingsTypecodePostRequest,
    initOverrides?: RequestInit
  ): Promise<object> {
    const response = await this.fyiSettingsTypecodePostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Returns the total number of unread fyis
   * Get unread number of fyis. The HTTP method POST is also supported.
   */
  async fyiUnreadnumberGetRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse2002>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/fyi/unreadnumber`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse2002FromJSON(jsonValue)
    );
  }

  /**
   * Returns the total number of unread fyis
   * Get unread number of fyis. The HTTP method POST is also supported.
   */
  async fyiUnreadnumberGet(
    initOverrides?: RequestInit
  ): Promise<InlineResponse2002> {
    const response = await this.fyiUnreadnumberGetRaw(initOverrides);
    return await response.value();
  }
}
