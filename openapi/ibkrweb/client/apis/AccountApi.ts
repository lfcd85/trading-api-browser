// @ts-nocheck
/* eslint-disable */
/**
 * Client Portal Web API
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import {
  Account,
  AccountFromJSON,
  AccountToJSON,
  InlineResponse20011,
  InlineResponse20011FromJSON,
  InlineResponse20011ToJSON,
  InlineResponse20012,
  InlineResponse20012FromJSON,
  InlineResponse20012ToJSON,
  InlineResponse20031,
  InlineResponse20031FromJSON,
  InlineResponse20031ToJSON,
  InlineResponse20035,
  InlineResponse20035FromJSON,
  InlineResponse20035ToJSON,
  InlineResponse20036,
  InlineResponse20036FromJSON,
  InlineResponse20036ToJSON,
  SetAccount,
  SetAccountFromJSON,
  SetAccountToJSON,
} from '../models'

export interface IserverAccountPostRequest {
  body: SetAccount
}

export interface PortfolioAccountIdLedgerGetRequest {
  accountId: string
}

export interface PortfolioAccountIdMetaGetRequest {
  accountId: string
}

export interface PortfolioAccountIdSummaryGetRequest {
  accountId: string
}

/**
 *
 */
export class AccountApi extends runtime.BaseAPI {
  /**
   * Returns an object containing PnL for the selected account and its models (if any). To receive streaming PnL the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
   * PnL for the selected account
   */
  async iserverAccountPnlPartitionedGetRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse20031>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/iserver/account/pnl/partitioned`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse20031FromJSON(jsonValue)
    )
  }

  /**
   * Returns an object containing PnL for the selected account and its models (if any). To receive streaming PnL the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
   * PnL for the selected account
   */
  async iserverAccountPnlPartitionedGet(
    initOverrides?: RequestInit
  ): Promise<InlineResponse20031> {
    const response = await this.iserverAccountPnlPartitionedGetRaw(
      initOverrides
    )
    return await response.value()
  }

  /**
   * If an user has multiple accounts, and user wants to get orders, trades, etc. of an account other than currently selected account, then user can update the currently selected account using this API and then can fetch required information for the newly updated account.
   * Switch Account
   */
  async iserverAccountPostRaw(
    requestParameters: IserverAccountPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse20012>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling iserverAccountPost.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/iserver/account`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: SetAccountToJSON(requestParameters.body),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse20012FromJSON(jsonValue)
    )
  }

  /**
   * If an user has multiple accounts, and user wants to get orders, trades, etc. of an account other than currently selected account, then user can update the currently selected account using this API and then can fetch required information for the newly updated account.
   * Switch Account
   */
  async iserverAccountPost(
    requestParameters: IserverAccountPostRequest,
    initOverrides?: RequestInit
  ): Promise<InlineResponse20012> {
    const response = await this.iserverAccountPostRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Returns a list of accounts the user has trading access to, their respective aliases and the currently selected account. Note this endpoint must be called before modifying an order or querying open orders.
   * Brokerage Accounts
   */
  async iserverAccountsGetRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse20011>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/iserver/accounts`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse20011FromJSON(jsonValue)
    )
  }

  /**
   * Returns a list of accounts the user has trading access to, their respective aliases and the currently selected account. Note this endpoint must be called before modifying an order or querying open orders.
   * Brokerage Accounts
   */
  async iserverAccountsGet(
    initOverrides?: RequestInit
  ): Promise<InlineResponse20011> {
    const response = await this.iserverAccountsGetRaw(initOverrides)
    return await response.value()
  }

  /**
   * Information regarding settled cash, cash balances, etc. in the account\'s base currency and any other cash balances hold in other currencies.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. The list of supported currencies is available at https://www.interactivebrokers.com/en/index.php?f=3185.
   * Account Ledger
   */
  async portfolioAccountIdLedgerGetRaw(
    requestParameters: PortfolioAccountIdLedgerGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse20036>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        'accountId',
        'Required parameter requestParameters.accountId was null or undefined when calling portfolioAccountIdLedgerGet.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/portfolio/{accountId}/ledger`.replace(
          `{${'accountId'}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse20036FromJSON(jsonValue)
    )
  }

  /**
   * Information regarding settled cash, cash balances, etc. in the account\'s base currency and any other cash balances hold in other currencies.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. The list of supported currencies is available at https://www.interactivebrokers.com/en/index.php?f=3185.
   * Account Ledger
   */
  async portfolioAccountIdLedgerGet(
    requestParameters: PortfolioAccountIdLedgerGetRequest,
    initOverrides?: RequestInit
  ): Promise<InlineResponse20036> {
    const response = await this.portfolioAccountIdLedgerGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Account information related to account Id /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
   * Account Information
   */
  async portfolioAccountIdMetaGetRaw(
    requestParameters: PortfolioAccountIdMetaGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<Account>>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        'accountId',
        'Required parameter requestParameters.accountId was null or undefined when calling portfolioAccountIdMetaGet.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/portfolio/{accountId}/meta`.replace(
          `{${'accountId'}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(AccountFromJSON)
    )
  }

  /**
   * Account information related to account Id /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
   * Account Information
   */
  async portfolioAccountIdMetaGet(
    requestParameters: PortfolioAccountIdMetaGetRequest,
    initOverrides?: RequestInit
  ): Promise<Array<Account>> {
    const response = await this.portfolioAccountIdMetaGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Returns information about margin, cash balances and other information related to specified account. See also /portfolio/{accountId}/ledger. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
   * Account Summary
   */
  async portfolioAccountIdSummaryGetRaw(
    requestParameters: PortfolioAccountIdSummaryGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse20035>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        'accountId',
        'Required parameter requestParameters.accountId was null or undefined when calling portfolioAccountIdSummaryGet.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/portfolio/{accountId}/summary`.replace(
          `{${'accountId'}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse20035FromJSON(jsonValue)
    )
  }

  /**
   * Returns information about margin, cash balances and other information related to specified account. See also /portfolio/{accountId}/ledger. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.
   * Account Summary
   */
  async portfolioAccountIdSummaryGet(
    requestParameters: PortfolioAccountIdSummaryGetRequest,
    initOverrides?: RequestInit
  ): Promise<InlineResponse20035> {
    const response = await this.portfolioAccountIdSummaryGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * In non-tiered account structures, returns a list of accounts for which the user can view position and account information. This endpoint must be called prior  to calling other /portfolio endpoints for those accounts. For querying a list of accounts  which the user can trade, see /iserver/accounts. For a list of subaccounts in tiered  account structures (e.g. financial advisor or ibroker accounts) see /portfolio/subaccounts.
   * Portfolio Accounts
   */
  async portfolioAccountsGetRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<Account>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/portfolio/accounts`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(AccountFromJSON)
    )
  }

  /**
   * In non-tiered account structures, returns a list of accounts for which the user can view position and account information. This endpoint must be called prior  to calling other /portfolio endpoints for those accounts. For querying a list of accounts  which the user can trade, see /iserver/accounts. For a list of subaccounts in tiered  account structures (e.g. financial advisor or ibroker accounts) see /portfolio/subaccounts.
   * Portfolio Accounts
   */
  async portfolioAccountsGet(
    initOverrides?: RequestInit
  ): Promise<Array<Account>> {
    const response = await this.portfolioAccountsGetRaw(initOverrides)
    return await response.value()
  }

  /**
   * Used in tiered account structures (such as financial advisor and ibroker accounts)  to return a list of sub-accounts for which the user can view position and  account-related information. This endpoint must be called prior to calling other  /portfolio endpoints for those subaccounts.  To query a list of accounts the user can trade, see /iserver/accounts.
   * List of Sub-Accounts
   */
  async portfolioSubaccountsGetRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Account>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/portfolio/subaccounts`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AccountFromJSON(jsonValue)
    )
  }

  /**
   * Used in tiered account structures (such as financial advisor and ibroker accounts)  to return a list of sub-accounts for which the user can view position and  account-related information. This endpoint must be called prior to calling other  /portfolio endpoints for those subaccounts.  To query a list of accounts the user can trade, see /iserver/accounts.
   * List of Sub-Accounts
   */
  async portfolioSubaccountsGet(initOverrides?: RequestInit): Promise<Account> {
    const response = await this.portfolioSubaccountsGetRaw(initOverrides)
    return await response.value()
  }
}
