/* tslint:disable */
/* eslint-disable */
/**
 * Client Portal Web API
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  InlineObject11,
  InlineObject11FromJSON,
  InlineObject11ToJSON,
  InlineObject12,
  InlineObject12FromJSON,
  InlineObject12ToJSON,
  InlineObject13,
  InlineObject13FromJSON,
  InlineObject13ToJSON,
  Performance,
  PerformanceFromJSON,
  PerformanceToJSON,
  Summary,
  SummaryFromJSON,
  SummaryToJSON,
  Transactions,
  TransactionsFromJSON,
  TransactionsToJSON,
} from "../models";

export interface PaPerformancePostRequest {
  body: InlineObject11;
}

export interface PaSummaryPostRequest {
  body: InlineObject12;
}

export interface PaTransactionsPostRequest {
  body: InlineObject13;
}

/**
 *
 */
export class PortfolioAnalystApi extends runtime.BaseAPI {
  /**
   * Returns the performance (MTM) for the given accounts, if more than one account is passed, the result is consolidated.
   * Account Performance
   */
  async paPerformancePostRaw(
    requestParameters: PaPerformancePostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Performance>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        "body",
        "Required parameter requestParameters.body was null or undefined when calling paPerformancePost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/pa/performance`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: InlineObject11ToJSON(requestParameters.body),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PerformanceFromJSON(jsonValue)
    );
  }

  /**
   * Returns the performance (MTM) for the given accounts, if more than one account is passed, the result is consolidated.
   * Account Performance
   */
  async paPerformancePost(
    requestParameters: PaPerformancePostRequest,
    initOverrides?: RequestInit
  ): Promise<Performance> {
    const response = await this.paPerformancePostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Returns a summary of all account balances for the given accounts, if more than one account is passed, the result is consolidated.
   * Account Balance\'s Summary
   */
  async paSummaryPostRaw(
    requestParameters: PaSummaryPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Summary>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        "body",
        "Required parameter requestParameters.body was null or undefined when calling paSummaryPost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/pa/summary`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: InlineObject12ToJSON(requestParameters.body),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SummaryFromJSON(jsonValue)
    );
  }

  /**
   * Returns a summary of all account balances for the given accounts, if more than one account is passed, the result is consolidated.
   * Account Balance\'s Summary
   */
  async paSummaryPost(
    requestParameters: PaSummaryPostRequest,
    initOverrides?: RequestInit
  ): Promise<Summary> {
    const response = await this.paSummaryPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * transaction history for a given number of conids and accounts. Types of transactions include dividend payments, buy and sell transactions, transfers.
   * Position\'s Transaction History
   */
  async paTransactionsPostRaw(
    requestParameters: PaTransactionsPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Transactions>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        "body",
        "Required parameter requestParameters.body was null or undefined when calling paTransactionsPost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/pa/transactions`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: InlineObject13ToJSON(requestParameters.body),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TransactionsFromJSON(jsonValue)
    );
  }

  /**
   * transaction history for a given number of conids and accounts. Types of transactions include dividend payments, buy and sell transactions, transfers.
   * Position\'s Transaction History
   */
  async paTransactionsPost(
    requestParameters: PaTransactionsPostRequest,
    initOverrides?: RequestInit
  ): Promise<Transactions> {
    const response = await this.paTransactionsPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
