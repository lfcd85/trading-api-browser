// @ts-nocheck
/* eslint-disable */
/**
 * Client Portal Web API
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  InlineObject4,
  InlineObject4FromJSON,
  InlineObject4ToJSON,
  InlineObject5,
  InlineObject5FromJSON,
  InlineObject5ToJSON,
  InlineObject6,
  InlineObject6FromJSON,
  InlineObject6ToJSON,
  InlineObject7,
  InlineObject7FromJSON,
  InlineObject7ToJSON,
  InlineResponse20016,
  InlineResponse20016FromJSON,
  InlineResponse20016ToJSON,
  InlineResponse20017,
  InlineResponse20017FromJSON,
  InlineResponse20017ToJSON,
  InlineResponse20018,
  InlineResponse20018FromJSON,
  InlineResponse20018ToJSON,
  InlineResponse20019,
  InlineResponse20019FromJSON,
  InlineResponse20019ToJSON,
  InlineResponse20020,
  InlineResponse20020FromJSON,
  InlineResponse20020ToJSON,
  InlineResponse20021,
  InlineResponse20021FromJSON,
  InlineResponse20021ToJSON,
  InlineResponse400,
  InlineResponse400FromJSON,
  InlineResponse400ToJSON,
  ModifyOrder,
  ModifyOrderFromJSON,
  ModifyOrderToJSON,
  OrderRequest,
  OrderRequestFromJSON,
  OrderRequestToJSON,
  OrderStatus,
  OrderStatusFromJSON,
  OrderStatusToJSON,
} from "../models";

export interface IserverAccountAccountIdOrderOrderIdDeleteRequest {
  accountId: string;
  orderId: string;
}

export interface IserverAccountAccountIdOrderOrderIdPostRequest {
  accountId: string;
  orderId: string;
  body: ModifyOrder;
}

export interface IserverAccountAccountIdOrderPostRequest {
  accountId: string;
  body: OrderRequest;
}

export interface IserverAccountAccountIdOrderWhatifPostRequest {
  accountId: string;
  body: OrderRequest;
}

export interface IserverAccountAccountIdOrdersPostRequest {
  accountId: string;
  body: InlineObject5;
}

export interface IserverAccountAccountIdOrdersWhatifPostRequest {
  accountId: string;
  body: InlineObject7;
}

export interface IserverAccountOrderStatusOrderIdGetRequest {
  orderId: string;
}

export interface IserverAccountOrdersFaGroupPostRequest {
  faGroup: string;
  body: OrderRequest;
}

export interface IserverAccountOrdersGetRequest {
  body?: InlineObject4;
}

export interface IserverReplyReplyidPostRequest {
  replyid: string;
  body: InlineObject6;
}

/**
 *
 */
export class OrderApi extends runtime.BaseAPI {
  /**
   * Cancels an open order. Must call /iserver/accounts endpoint prior to cancelling an order. Use /iservers/account/orders endpoint to review open-order(s) and get latest order status.
   * Cancel Order
   */
  async iserverAccountAccountIdOrderOrderIdDeleteRaw(
    requestParameters: IserverAccountAccountIdOrderOrderIdDeleteRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse20021>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling iserverAccountAccountIdOrderOrderIdDelete."
      );
    }

    if (
      requestParameters.orderId === null ||
      requestParameters.orderId === undefined
    ) {
      throw new runtime.RequiredError(
        "orderId",
        "Required parameter requestParameters.orderId was null or undefined when calling iserverAccountAccountIdOrderOrderIdDelete."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/iserver/account/{accountId}/order/{orderId}`
          .replace(
            `{${"accountId"}}`,
            encodeURIComponent(String(requestParameters.accountId))
          )
          .replace(
            `{${"orderId"}}`,
            encodeURIComponent(String(requestParameters.orderId))
          ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse20021FromJSON(jsonValue)
    );
  }

  /**
   * Cancels an open order. Must call /iserver/accounts endpoint prior to cancelling an order. Use /iservers/account/orders endpoint to review open-order(s) and get latest order status.
   * Cancel Order
   */
  async iserverAccountAccountIdOrderOrderIdDelete(
    requestParameters: IserverAccountAccountIdOrderOrderIdDeleteRequest,
    initOverrides?: RequestInit
  ): Promise<InlineResponse20021> {
    const response = await this.iserverAccountAccountIdOrderOrderIdDeleteRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Modifies an open order. Must call /iserver/accounts endpoint prior to modifying an order. Use /iservers/account/orders endpoint to review open-order(s).
   * Modify Order
   */
  async iserverAccountAccountIdOrderOrderIdPostRaw(
    requestParameters: IserverAccountAccountIdOrderOrderIdPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<InlineResponse20020>>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling iserverAccountAccountIdOrderOrderIdPost."
      );
    }

    if (
      requestParameters.orderId === null ||
      requestParameters.orderId === undefined
    ) {
      throw new runtime.RequiredError(
        "orderId",
        "Required parameter requestParameters.orderId was null or undefined when calling iserverAccountAccountIdOrderOrderIdPost."
      );
    }

    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        "body",
        "Required parameter requestParameters.body was null or undefined when calling iserverAccountAccountIdOrderOrderIdPost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/iserver/account/{accountId}/order/{orderId}`
          .replace(
            `{${"accountId"}}`,
            encodeURIComponent(String(requestParameters.accountId))
          )
          .replace(
            `{${"orderId"}}`,
            encodeURIComponent(String(requestParameters.orderId))
          ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ModifyOrderToJSON(requestParameters.body),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(InlineResponse20020FromJSON)
    );
  }

  /**
   * Modifies an open order. Must call /iserver/accounts endpoint prior to modifying an order. Use /iservers/account/orders endpoint to review open-order(s).
   * Modify Order
   */
  async iserverAccountAccountIdOrderOrderIdPost(
    requestParameters: IserverAccountAccountIdOrderOrderIdPostRequest,
    initOverrides?: RequestInit
  ): Promise<Array<InlineResponse20020>> {
    const response = await this.iserverAccountAccountIdOrderOrderIdPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * This end-point is going to be deprecated, you can use /iserver/account/{accountId}/orders, just pass one order in the array, the order structure will be same. Please note here, sometimes this endpoint alone can\'t make sure you submit the order successfully, you could receive some questions in the response, you have to to answer them in order to submit the order successfully. You can use \"/iserver/reply/{replyid}\" endpoint to answer questions
   * Place Order (Deprecated)
   */
  async iserverAccountAccountIdOrderPostRaw(
    requestParameters: IserverAccountAccountIdOrderPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<InlineResponse20017>>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling iserverAccountAccountIdOrderPost."
      );
    }

    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        "body",
        "Required parameter requestParameters.body was null or undefined when calling iserverAccountAccountIdOrderPost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/iserver/account/{accountId}/order`.replace(
          `{${"accountId"}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: OrderRequestToJSON(requestParameters.body),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(InlineResponse20017FromJSON)
    );
  }

  /**
   * This end-point is going to be deprecated, you can use /iserver/account/{accountId}/orders, just pass one order in the array, the order structure will be same. Please note here, sometimes this endpoint alone can\'t make sure you submit the order successfully, you could receive some questions in the response, you have to to answer them in order to submit the order successfully. You can use \"/iserver/reply/{replyid}\" endpoint to answer questions
   * Place Order (Deprecated)
   */
  async iserverAccountAccountIdOrderPost(
    requestParameters: IserverAccountAccountIdOrderPostRequest,
    initOverrides?: RequestInit
  ): Promise<Array<InlineResponse20017>> {
    const response = await this.iserverAccountAccountIdOrderPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * This end-point is going to be deprecated, you can use /iserver/account/{accountId}/orders/whatif, just pass one order in the array, the order structure will be same. This endpoint allows you to preview order without actually submitting the order and you can get commission information in the response.
   * Preview Order (Deprecated)
   */
  async iserverAccountAccountIdOrderWhatifPostRaw(
    requestParameters: IserverAccountAccountIdOrderWhatifPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse20019>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling iserverAccountAccountIdOrderWhatifPost."
      );
    }

    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        "body",
        "Required parameter requestParameters.body was null or undefined when calling iserverAccountAccountIdOrderWhatifPost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/iserver/account/{accountId}/order/whatif`.replace(
          `{${"accountId"}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: OrderRequestToJSON(requestParameters.body),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse20019FromJSON(jsonValue)
    );
  }

  /**
   * This end-point is going to be deprecated, you can use /iserver/account/{accountId}/orders/whatif, just pass one order in the array, the order structure will be same. This endpoint allows you to preview order without actually submitting the order and you can get commission information in the response.
   * Preview Order (Deprecated)
   */
  async iserverAccountAccountIdOrderWhatifPost(
    requestParameters: IserverAccountAccountIdOrderWhatifPostRequest,
    initOverrides?: RequestInit
  ): Promise<InlineResponse20019> {
    const response = await this.iserverAccountAccountIdOrderWhatifPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * You can pass a list of orders here such as bracket and OCA orders. Notes for OCA(one cancel all orders) orders: 1. if one order in the group is filled/cancelled, all the others in the same group will be cancelled. 2. To create OCA orders, please set isSingleGroup to true in each order 3. All orders in the same group will have same oca_group_id, you can get oca_group_id from /iserver/account/order/status/{orderId} end-point after orders are placed successfully
   * Place Orders
   */
  async iserverAccountAccountIdOrdersPostRaw(
    requestParameters: IserverAccountAccountIdOrdersPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<InlineResponse20017>>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling iserverAccountAccountIdOrdersPost."
      );
    }

    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        "body",
        "Required parameter requestParameters.body was null or undefined when calling iserverAccountAccountIdOrdersPost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/iserver/account/{accountId}/orders`.replace(
          `{${"accountId"}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: InlineObject5ToJSON(requestParameters.body),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(InlineResponse20017FromJSON)
    );
  }

  /**
   * You can pass a list of orders here such as bracket and OCA orders. Notes for OCA(one cancel all orders) orders: 1. if one order in the group is filled/cancelled, all the others in the same group will be cancelled. 2. To create OCA orders, please set isSingleGroup to true in each order 3. All orders in the same group will have same oca_group_id, you can get oca_group_id from /iserver/account/order/status/{orderId} end-point after orders are placed successfully
   * Place Orders
   */
  async iserverAccountAccountIdOrdersPost(
    requestParameters: IserverAccountAccountIdOrdersPostRequest,
    initOverrides?: RequestInit
  ): Promise<Array<InlineResponse20017>> {
    const response = await this.iserverAccountAccountIdOrdersPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * This endpoint allows you to preview order without actually submitting the order and you can get commission information in the response. Also supports bracket orders.
   * Preview Orders
   */
  async iserverAccountAccountIdOrdersWhatifPostRaw(
    requestParameters: IserverAccountAccountIdOrdersWhatifPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse20019>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling iserverAccountAccountIdOrdersWhatifPost."
      );
    }

    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        "body",
        "Required parameter requestParameters.body was null or undefined when calling iserverAccountAccountIdOrdersWhatifPost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/iserver/account/{accountId}/orders/whatif`.replace(
          `{${"accountId"}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: InlineObject7ToJSON(requestParameters.body),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse20019FromJSON(jsonValue)
    );
  }

  /**
   * This endpoint allows you to preview order without actually submitting the order and you can get commission information in the response. Also supports bracket orders.
   * Preview Orders
   */
  async iserverAccountAccountIdOrdersWhatifPost(
    requestParameters: IserverAccountAccountIdOrdersWhatifPostRequest,
    initOverrides?: RequestInit
  ): Promise<InlineResponse20019> {
    const response = await this.iserverAccountAccountIdOrdersWhatifPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Order Status
   */
  async iserverAccountOrderStatusOrderIdGetRaw(
    requestParameters: IserverAccountOrderStatusOrderIdGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<OrderStatus>> {
    if (
      requestParameters.orderId === null ||
      requestParameters.orderId === undefined
    ) {
      throw new runtime.RequiredError(
        "orderId",
        "Required parameter requestParameters.orderId was null or undefined when calling iserverAccountOrderStatusOrderIdGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/iserver/account/order/status/{orderId}`.replace(
          `{${"orderId"}}`,
          encodeURIComponent(String(requestParameters.orderId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OrderStatusFromJSON(jsonValue)
    );
  }

  /**
   * Order Status
   */
  async iserverAccountOrderStatusOrderIdGet(
    requestParameters: IserverAccountOrderStatusOrderIdGetRequest,
    initOverrides?: RequestInit
  ): Promise<OrderStatus> {
    const response = await this.iserverAccountOrderStatusOrderIdGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Financial Advisors can use this endpoint to place an order for a specified group. To place an order for a specified account use the endpoint /iserver/account/{accountId}/order. More information about groups can be found in the [TWS Users\' Guide:](https://guides.interactivebrokers.com/twsguide/twsguide.htm#usersguidebook/financialadvisors/create_an_account_group_for_share_allocation.htm).
   * Place Orders for FA
   */
  async iserverAccountOrdersFaGroupPostRaw(
    requestParameters: IserverAccountOrdersFaGroupPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<InlineResponse20017>>> {
    if (
      requestParameters.faGroup === null ||
      requestParameters.faGroup === undefined
    ) {
      throw new runtime.RequiredError(
        "faGroup",
        "Required parameter requestParameters.faGroup was null or undefined when calling iserverAccountOrdersFaGroupPost."
      );
    }

    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        "body",
        "Required parameter requestParameters.body was null or undefined when calling iserverAccountOrdersFaGroupPost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/iserver/account/orders/{faGroup}`.replace(
          `{${"faGroup"}}`,
          encodeURIComponent(String(requestParameters.faGroup))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: OrderRequestToJSON(requestParameters.body),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(InlineResponse20017FromJSON)
    );
  }

  /**
   * Financial Advisors can use this endpoint to place an order for a specified group. To place an order for a specified account use the endpoint /iserver/account/{accountId}/order. More information about groups can be found in the [TWS Users\' Guide:](https://guides.interactivebrokers.com/twsguide/twsguide.htm#usersguidebook/financialadvisors/create_an_account_group_for_share_allocation.htm).
   * Place Orders for FA
   */
  async iserverAccountOrdersFaGroupPost(
    requestParameters: IserverAccountOrdersFaGroupPostRequest,
    initOverrides?: RequestInit
  ): Promise<Array<InlineResponse20017>> {
    const response = await this.iserverAccountOrdersFaGroupPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * The endpoint is meant to be used in polling mode, e.g. requesting every x seconds. The response will contain two objects, one is notification, the other is orders. Orders is the list of live orders (cancelled, filled, submitted). Notifications contains information about execute orders as they happen, see status field. To receive streaming live orders the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
   * Live Orders
   */
  async iserverAccountOrdersGetRaw(
    requestParameters: IserverAccountOrdersGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse20016>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/iserver/account/orders`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
        body: InlineObject4ToJSON(requestParameters.body),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse20016FromJSON(jsonValue)
    );
  }

  /**
   * The endpoint is meant to be used in polling mode, e.g. requesting every x seconds. The response will contain two objects, one is notification, the other is orders. Orders is the list of live orders (cancelled, filled, submitted). Notifications contains information about execute orders as they happen, see status field. To receive streaming live orders the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
   * Live Orders
   */
  async iserverAccountOrdersGet(
    requestParameters: IserverAccountOrdersGetRequest,
    initOverrides?: RequestInit
  ): Promise<InlineResponse20016> {
    const response = await this.iserverAccountOrdersGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Reply to questions when placing orders and submit orders
   * Place Order Reply
   */
  async iserverReplyReplyidPostRaw(
    requestParameters: IserverReplyReplyidPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<InlineResponse20018>>> {
    if (
      requestParameters.replyid === null ||
      requestParameters.replyid === undefined
    ) {
      throw new runtime.RequiredError(
        "replyid",
        "Required parameter requestParameters.replyid was null or undefined when calling iserverReplyReplyidPost."
      );
    }

    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        "body",
        "Required parameter requestParameters.body was null or undefined when calling iserverReplyReplyidPost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/iserver/reply/{replyid}`.replace(
          `{${"replyid"}}`,
          encodeURIComponent(String(requestParameters.replyid))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: InlineObject6ToJSON(requestParameters.body),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(InlineResponse20018FromJSON)
    );
  }

  /**
   * Reply to questions when placing orders and submit orders
   * Place Order Reply
   */
  async iserverReplyReplyidPost(
    requestParameters: IserverReplyReplyidPostRequest,
    initOverrides?: RequestInit
  ): Promise<Array<InlineResponse20018>> {
    const response = await this.iserverReplyReplyidPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
