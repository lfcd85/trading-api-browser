/* tslint:disable */
/* eslint-disable */
/**
 * Client Portal Web API
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  AuthStatus,
  AuthStatusFromJSON,
  AuthStatusToJSON,
  InlineResponse200,
  InlineResponse200FromJSON,
  InlineResponse200ToJSON,
  InlineResponse20038,
  InlineResponse20038FromJSON,
  InlineResponse20038ToJSON,
} from "../models";

/**
 *
 */
export class SessionApi extends runtime.BaseAPI {
  /**
   * Current Authentication status to the Brokerage system. Market Data and Trading is not possible if not authenticated, e.g. authenticated shows false
   * Authentication Status
   */
  async iserverAuthStatusPostRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<AuthStatus>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/iserver/auth/status`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AuthStatusFromJSON(jsonValue)
    );
  }

  /**
   * Current Authentication status to the Brokerage system. Market Data and Trading is not possible if not authenticated, e.g. authenticated shows false
   * Authentication Status
   */
  async iserverAuthStatusPost(
    initOverrides?: RequestInit
  ): Promise<AuthStatus> {
    const response = await this.iserverAuthStatusPostRaw(initOverrides);
    return await response.value();
  }

  /**
   * When using the CP Gateway, this endpoint provides a way to reauthenticate to the Brokerage system as long as there is a valid SSO session, see /sso/validate.
   * Tries to re-authenticate to Brokerage
   */
  async iserverReauthenticatePostRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<AuthStatus>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/iserver/reauthenticate`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AuthStatusFromJSON(jsonValue)
    );
  }

  /**
   * When using the CP Gateway, this endpoint provides a way to reauthenticate to the Brokerage system as long as there is a valid SSO session, see /sso/validate.
   * Tries to re-authenticate to Brokerage
   */
  async iserverReauthenticatePost(
    initOverrides?: RequestInit
  ): Promise<AuthStatus> {
    const response = await this.iserverReauthenticatePostRaw(initOverrides);
    return await response.value();
  }

  /**
   * Logs the user out of the gateway session. Any further activity requires re-authentication.
   * Ends the current session
   */
  async logoutPostRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse200>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/logout`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse200FromJSON(jsonValue)
    );
  }

  /**
   * Logs the user out of the gateway session. Any further activity requires re-authentication.
   * Ends the current session
   */
  async logoutPost(initOverrides?: RequestInit): Promise<InlineResponse200> {
    const response = await this.logoutPostRaw(initOverrides);
    return await response.value();
  }

  /**
   * Validates the current session for the SSO user
   * Validate SSO
   */
  async ssoValidateGetRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InlineResponse20038>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/sso/validate`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse20038FromJSON(jsonValue)
    );
  }

  /**
   * Validates the current session for the SSO user
   * Validate SSO
   */
  async ssoValidateGet(
    initOverrides?: RequestInit
  ): Promise<InlineResponse20038> {
    const response = await this.ssoValidateGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * If the gateway has not received any requests for several minutes an open session will automatically timeout. The tickle endpoint pings the server to prevent the session from ending.
   * Ping the server to keep the session open
   */
  async ticklePostRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/tickle`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * If the gateway has not received any requests for several minutes an open session will automatically timeout. The tickle endpoint pings the server to prevent the session from ending.
   * Ping the server to keep the session open
   */
  async ticklePost(initOverrides?: RequestInit): Promise<void> {
    await this.ticklePostRaw(initOverrides);
  }
}
