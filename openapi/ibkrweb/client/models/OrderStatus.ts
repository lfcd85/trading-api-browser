// @ts-nocheck
/* eslint-disable */
/**
 * Client Portal Web API
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
/**
 * contains all the details of an order
 * @export
 * @interface OrderStatus
 */
export interface OrderStatus {
  /**
   * order sub-type
   * @type {string}
   * @memberof OrderStatus
   */
  subType?: string
  /**
   * order request id
   * @type {string}
   * @memberof OrderStatus
   */
  requestId?: string
  /**
   * system generated order id, unique per account
   * @type {number}
   * @memberof OrderStatus
   */
  orderId?: number
  /**
   * conid and exchange. Format supports conid or conid@exchange
   * @type {string}
   * @memberof OrderStatus
   */
  conidex?: string
  /**
   * Underlying symbol
   * @type {string}
   * @memberof OrderStatus
   */
  symbol?: string
  /**
   * The side of the market of the order.
   *   * B - Buy contract near posted ask price
   *   * S - Sell contract near posted bid price
   *   * X - Option expired
   * @type {string}
   * @memberof OrderStatus
   */
  side?: OrderStatusSideEnum
  /**
   * Format contract name
   * @type {string}
   * @memberof OrderStatus
   */
  contractDescription1?: string
  /**
   * Trading Exchange or Venue
   * @type {string}
   * @memberof OrderStatus
   */
  listingExchange?: string
  /**
   *
   * @type {string}
   * @memberof OrderStatus
   */
  optionAcct?: string
  /**
   * Contracts company name
   * @type {string}
   * @memberof OrderStatus
   */
  companyName?: string
  /**
   * Quantity updated
   * @type {string}
   * @memberof OrderStatus
   */
  size?: string
  /**
   * Total quantity
   * @type {string}
   * @memberof OrderStatus
   */
  totalSize?: string
  /**
   * Contract traded currency
   * @type {string}
   * @memberof OrderStatus
   */
  currency?: string
  /**
   * account id
   * @type {string}
   * @memberof OrderStatus
   */
  account?: string
  /**
   * Types of orders
   * @type {string}
   * @memberof OrderStatus
   */
  orderType?: string
  /**
   * Limit price
   * @type {string}
   * @memberof OrderStatus
   */
  limitPrice?: string
  /**
   * Stop price
   * @type {string}
   * @memberof OrderStatus
   */
  stopPrice?: string
  /**
   * Cumulative fill
   * @type {string}
   * @memberof OrderStatus
   */
  cumFill?: string
  /**
   * *  PendingSubmit - Indicates the order was sent, but confirmation has not been received that it has been received by the destination.
   *                    Occurs most commonly if an exchange is closed.
   * *  PendingCancel - Indicates that a request has been sent to cancel an order but confirmation has not been received of its cancellation. *  PreSubmitted - Indicates that a simulated order type has been accepted by the IBKR system and that this order has yet to be elected.
   *                   The order is held in the IBKR system until the election criteria are met. At that time the order is transmitted to the order destination as specified.
   * *  Submitted - Indicates that the order has been accepted at the order destination and is working. *  Cancelled - Indicates that the balance of the order has been confirmed cancelled by the IB system.
   *                This could occur unexpectedly when IB or the destination has rejected the order.
   * *  Filled - Indicates that the order has been completely filled. *  Inactive - Indicates the order is not working, for instance if the order was invalid and triggered an error message,
   *               or if the order was to short a security and shares have not yet been located.
   * @type {string}
   * @memberof OrderStatus
   */
  orderStatus?: string
  /**
   * Description of the order status
   * @type {string}
   * @memberof OrderStatus
   */
  orderStatusDescription?: string
  /**
   * Time-in-Force - length of time order will continue working before it is canceled.
   * @type {string}
   * @memberof OrderStatus
   */
  tif?: string
  /**
   * Foreground color in hex format
   * @type {string}
   * @memberof OrderStatus
   */
  fgColor?: string
  /**
   * Background color in hex format
   * @type {string}
   * @memberof OrderStatus
   */
  bgColor?: string
  /**
   * If true not allowed to modify order
   * @type {boolean}
   * @memberof OrderStatus
   */
  orderNotEditable?: boolean
  /**
   * Fields that can be edited in escaped unicode characters
   * @type {string}
   * @memberof OrderStatus
   */
  editableFields?: string
  /**
   * If true not allowed to cancel order
   * @type {boolean}
   * @memberof OrderStatus
   */
  cannotCancelOrder?: boolean
  /**
   * If true order trades outside regular trading hours
   * @type {boolean}
   * @memberof OrderStatus
   */
  outsideRth?: boolean
  /**
   * If true order is de-activated
   * @type {boolean}
   * @memberof OrderStatus
   */
  deactivateOrder?: boolean
  /**
   * If true price management algo is enabled, refer to https://www.interactivebrokers.com/en/index.php?f=43423
   * @type {boolean}
   * @memberof OrderStatus
   */
  usePriceMgmtAlgo?: boolean
  /**
   * Asset class
   * @type {string}
   * @memberof OrderStatus
   */
  secType?: string
  /**
   * List of available chart periods
   * @type {string}
   * @memberof OrderStatus
   */
  availableChartPeriods?: string
  /**
   * Format description of order
   * @type {string}
   * @memberof OrderStatus
   */
  orderDescription?: string
  /**
   * order_description with the symbol
   * @type {string}
   * @memberof OrderStatus
   */
  orderDescriptionWithContract?: string
  /**
   *
   * @type {number}
   * @memberof OrderStatus
   */
  alertActive?: number
  /**
   * type of the child order
   * @type {string}
   * @memberof OrderStatus
   */
  childOrderType?: string
  /**
   * Format fillQuantity\totalQuantity
   * @type {string}
   * @memberof OrderStatus
   */
  sizeAndFills?: string
  /**
   * Position display price
   * @type {string}
   * @memberof OrderStatus
   */
  exitStrategyDisplayPrice?: string
  /**
   * Position description to display on chart
   * @type {string}
   * @memberof OrderStatus
   */
  exitStrategyChartDescription?: string
  /**
   * * 1: If your account has position or order for contract * 0: If your account has no position or order for contract
   * @type {string}
   * @memberof OrderStatus
   */
  exitStrategyToolAvailability?: OrderStatusExitStrategyToolAvailabilityEnum
  /**
   * Returns true if contract supports duplicate/opposite side order.
   * @type {boolean}
   * @memberof OrderStatus
   */
  allowedDuplicateOpposite?: boolean
  /**
   * Time of status update in unix time
   * @type {string}
   * @memberof OrderStatus
   */
  orderTime?: string
  /**
   * only exists for oca orders, oca orders in same group will have same id
   * @type {string}
   * @memberof OrderStatus
   */
  ocaGroupId?: string
}

/**
 * @export
 * @enum {string}
 */
export enum OrderStatusSideEnum {
  B = 'B',
  S = 'S',
  X = 'X',
}
/**
 * @export
 * @enum {string}
 */
export enum OrderStatusExitStrategyToolAvailabilityEnum {
  _1 = '1',
  _0 = '0',
}

export function OrderStatusFromJSON(json: any): OrderStatus {
  return OrderStatusFromJSONTyped(json, false)
}

export function OrderStatusFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): OrderStatus {
  if (json === undefined || json === null) {
    return json
  }
  return {
    subType: !exists(json, 'sub_type') ? undefined : json['sub_type'],
    requestId: !exists(json, 'request_id') ? undefined : json['request_id'],
    orderId: !exists(json, 'order_id') ? undefined : json['order_id'],
    conidex: !exists(json, 'conidex') ? undefined : json['conidex'],
    symbol: !exists(json, 'symbol') ? undefined : json['symbol'],
    side: !exists(json, 'side') ? undefined : json['side'],
    contractDescription1: !exists(json, 'contract_description_1')
      ? undefined
      : json['contract_description_1'],
    listingExchange: !exists(json, 'listing_exchange')
      ? undefined
      : json['listing_exchange'],
    optionAcct: !exists(json, 'option_acct') ? undefined : json['option_acct'],
    companyName: !exists(json, 'company_name')
      ? undefined
      : json['company_name'],
    size: !exists(json, 'size') ? undefined : json['size'],
    totalSize: !exists(json, 'total_size') ? undefined : json['total_size'],
    currency: !exists(json, 'currency') ? undefined : json['currency'],
    account: !exists(json, 'account') ? undefined : json['account'],
    orderType: !exists(json, 'order_type') ? undefined : json['order_type'],
    limitPrice: !exists(json, 'limit_price') ? undefined : json['limit_price'],
    stopPrice: !exists(json, 'stop_price') ? undefined : json['stop_price'],
    cumFill: !exists(json, 'cum_fill') ? undefined : json['cum_fill'],
    orderStatus: !exists(json, 'order_status')
      ? undefined
      : json['order_status'],
    orderStatusDescription: !exists(json, 'order_status_description')
      ? undefined
      : json['order_status_description'],
    tif: !exists(json, 'tif') ? undefined : json['tif'],
    fgColor: !exists(json, 'fg_color') ? undefined : json['fg_color'],
    bgColor: !exists(json, 'bg_color') ? undefined : json['bg_color'],
    orderNotEditable: !exists(json, 'order_not_editable')
      ? undefined
      : json['order_not_editable'],
    editableFields: !exists(json, 'editable_fields')
      ? undefined
      : json['editable_fields'],
    cannotCancelOrder: !exists(json, 'cannot_cancel_order')
      ? undefined
      : json['cannot_cancel_order'],
    outsideRth: !exists(json, 'outside_rth') ? undefined : json['outside_rth'],
    deactivateOrder: !exists(json, 'deactivate_order')
      ? undefined
      : json['deactivate_order'],
    usePriceMgmtAlgo: !exists(json, 'use_price_mgmt_algo')
      ? undefined
      : json['use_price_mgmt_algo'],
    secType: !exists(json, 'sec_type') ? undefined : json['sec_type'],
    availableChartPeriods: !exists(json, 'available_chart_periods')
      ? undefined
      : json['available_chart_periods'],
    orderDescription: !exists(json, 'order_description')
      ? undefined
      : json['order_description'],
    orderDescriptionWithContract: !exists(
      json,
      'order_description_with_contract'
    )
      ? undefined
      : json['order_description_with_contract'],
    alertActive: !exists(json, 'alert_active')
      ? undefined
      : json['alert_active'],
    childOrderType: !exists(json, 'child_order_type')
      ? undefined
      : json['child_order_type'],
    sizeAndFills: !exists(json, 'size_and_fills')
      ? undefined
      : json['size_and_fills'],
    exitStrategyDisplayPrice: !exists(json, 'exit_strategy_display_price')
      ? undefined
      : json['exit_strategy_display_price'],
    exitStrategyChartDescription: !exists(
      json,
      'exit_strategy_chart_description'
    )
      ? undefined
      : json['exit_strategy_chart_description'],
    exitStrategyToolAvailability: !exists(
      json,
      'exit_strategy_tool_availability'
    )
      ? undefined
      : json['exit_strategy_tool_availability'],
    allowedDuplicateOpposite: !exists(json, 'allowed_duplicate_opposite')
      ? undefined
      : json['allowed_duplicate_opposite'],
    orderTime: !exists(json, 'order_time') ? undefined : json['order_time'],
    ocaGroupId: !exists(json, 'oca_group_id')
      ? undefined
      : json['oca_group_id'],
  }
}

export function OrderStatusToJSON(value?: OrderStatus | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    sub_type: value.subType,
    request_id: value.requestId,
    order_id: value.orderId,
    conidex: value.conidex,
    symbol: value.symbol,
    side: value.side,
    contract_description_1: value.contractDescription1,
    listing_exchange: value.listingExchange,
    option_acct: value.optionAcct,
    company_name: value.companyName,
    size: value.size,
    total_size: value.totalSize,
    currency: value.currency,
    account: value.account,
    order_type: value.orderType,
    limit_price: value.limitPrice,
    stop_price: value.stopPrice,
    cum_fill: value.cumFill,
    order_status: value.orderStatus,
    order_status_description: value.orderStatusDescription,
    tif: value.tif,
    fg_color: value.fgColor,
    bg_color: value.bgColor,
    order_not_editable: value.orderNotEditable,
    editable_fields: value.editableFields,
    cannot_cancel_order: value.cannotCancelOrder,
    outside_rth: value.outsideRth,
    deactivate_order: value.deactivateOrder,
    use_price_mgmt_algo: value.usePriceMgmtAlgo,
    sec_type: value.secType,
    available_chart_periods: value.availableChartPeriods,
    order_description: value.orderDescription,
    order_description_with_contract: value.orderDescriptionWithContract,
    alert_active: value.alertActive,
    child_order_type: value.childOrderType,
    size_and_fills: value.sizeAndFills,
    exit_strategy_display_price: value.exitStrategyDisplayPrice,
    exit_strategy_chart_description: value.exitStrategyChartDescription,
    exit_strategy_tool_availability: value.exitStrategyToolAvailability,
    allowed_duplicate_opposite: value.allowedDuplicateOpposite,
    order_time: value.orderTime,
    oca_group_id: value.ocaGroupId,
  }
}
