/* tslint:disable */
/* eslint-disable */
/**
 * Client Portal Web API
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  AlertRequestConditions,
  AlertRequestConditionsFromJSON,
  AlertRequestConditionsFromJSONTyped,
  AlertRequestConditionsToJSON,
} from "./";

/**
 *
 * @export
 * @interface AlertRequest
 */
export interface AlertRequest {
  /**
   * orderId is required when modifying alert. You can get it from /iserver/account/:accountId/alerts
   * @type {number}
   * @memberof AlertRequest
   */
  orderId?: number;
  /**
   * name of alert
   * @type {string}
   * @memberof AlertRequest
   */
  alertName?: string;
  /**
   * The message you want to receive via email or text message
   * @type {string}
   * @memberof AlertRequest
   */
  alertMessage?: string;
  /**
   * whether alert is repeatable or not, so value can only be 0 or 1, this has to be 1 for MTA alert
   * @type {number}
   * @memberof AlertRequest
   */
  alertRepeatable?: number;
  /**
   * email address to receive alert
   * @type {string}
   * @memberof AlertRequest
   */
  email?: string;
  /**
   * whether allowing to send email or not, so value can only be 0 or 1,
   * @type {number}
   * @memberof AlertRequest
   */
  sendMessage?: number;
  /**
   * time in force, can only be GTC or GTD
   * @type {string}
   * @memberof AlertRequest
   */
  tif?: string;
  /**
   * format, YYYYMMDD-HH:mm:ss, please NOTE this will only work when tif is GTD
   * @type {string}
   * @memberof AlertRequest
   */
  expireTime?: string;
  /**
   * value can only be 0 or 1, set to 1 if the alert can be triggered outside regular trading hours.
   * @type {number}
   * @memberof AlertRequest
   */
  outsideRth?: number;
  /**
   * value can only be 0 or 1, set to 1 to enable the alert only in IBKR mobile
   * @type {number}
   * @memberof AlertRequest
   */
  iTWSOrdersOnly?: number;
  /**
   * value can only be 0 or 1, set to 1 to allow to show alert in pop-ups
   * @type {number}
   * @memberof AlertRequest
   */
  showPopup?: number;
  /**
   * for MTA alert only, each user has a unique toolId and it will stay the same, do not send for normal alert
   * @type {number}
   * @memberof AlertRequest
   */
  toolId?: number;
  /**
   * audio message to play when alert is triggered
   * @type {string}
   * @memberof AlertRequest
   */
  playAudio?: string;
  /**
   *
   * @type {Array<AlertRequestConditions>}
   * @memberof AlertRequest
   */
  conditions?: Array<AlertRequestConditions>;
}

export function AlertRequestFromJSON(json: any): AlertRequest {
  return AlertRequestFromJSONTyped(json, false);
}

export function AlertRequestFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): AlertRequest {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    orderId: !exists(json, "orderId") ? undefined : json["orderId"],
    alertName: !exists(json, "alertName") ? undefined : json["alertName"],
    alertMessage: !exists(json, "alertMessage")
      ? undefined
      : json["alertMessage"],
    alertRepeatable: !exists(json, "alertRepeatable")
      ? undefined
      : json["alertRepeatable"],
    email: !exists(json, "email") ? undefined : json["email"],
    sendMessage: !exists(json, "sendMessage") ? undefined : json["sendMessage"],
    tif: !exists(json, "tif") ? undefined : json["tif"],
    expireTime: !exists(json, "expireTime") ? undefined : json["expireTime"],
    outsideRth: !exists(json, "outsideRth") ? undefined : json["outsideRth"],
    iTWSOrdersOnly: !exists(json, "iTWSOrdersOnly")
      ? undefined
      : json["iTWSOrdersOnly"],
    showPopup: !exists(json, "showPopup") ? undefined : json["showPopup"],
    toolId: !exists(json, "toolId") ? undefined : json["toolId"],
    playAudio: !exists(json, "playAudio") ? undefined : json["playAudio"],
    conditions: !exists(json, "conditions")
      ? undefined
      : (json["conditions"] as Array<any>).map(AlertRequestConditionsFromJSON),
  };
}

export function AlertRequestToJSON(value?: AlertRequest | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    orderId: value.orderId,
    alertName: value.alertName,
    alertMessage: value.alertMessage,
    alertRepeatable: value.alertRepeatable,
    email: value.email,
    sendMessage: value.sendMessage,
    tif: value.tif,
    expireTime: value.expireTime,
    outsideRth: value.outsideRth,
    iTWSOrdersOnly: value.iTWSOrdersOnly,
    showPopup: value.showPopup,
    toolId: value.toolId,
    playAudio: value.playAudio,
    conditions:
      value.conditions === undefined
        ? undefined
        : (value.conditions as Array<any>).map(AlertRequestConditionsToJSON),
  };
}
