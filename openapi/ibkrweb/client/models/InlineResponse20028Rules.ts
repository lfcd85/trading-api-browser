// @ts-nocheck
/* eslint-disable */
/**
 * Client Portal Web API
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  InlineResponse20028CqtTypes,
  InlineResponse20028CqtTypesFromJSON,
  InlineResponse20028CqtTypesFromJSONTyped,
  InlineResponse20028CqtTypesToJSON,
  InlineResponse20028FraqTypes,
  InlineResponse20028FraqTypesFromJSON,
  InlineResponse20028FraqTypesFromJSONTyped,
  InlineResponse20028FraqTypesToJSON,
  InlineResponse20028IbalgoTypes,
  InlineResponse20028IbalgoTypesFromJSON,
  InlineResponse20028IbalgoTypesFromJSONTyped,
  InlineResponse20028IbalgoTypesToJSON,
  InlineResponse20028OrderDefaults,
  InlineResponse20028OrderDefaultsFromJSON,
  InlineResponse20028OrderDefaultsFromJSONTyped,
  InlineResponse20028OrderDefaultsToJSON,
  InlineResponse20028OrderTypes,
  InlineResponse20028OrderTypesFromJSON,
  InlineResponse20028OrderTypesFromJSONTyped,
  InlineResponse20028OrderTypesToJSON,
  InlineResponse20028OrderTypesOutside,
  InlineResponse20028OrderTypesOutsideFromJSON,
  InlineResponse20028OrderTypesOutsideFromJSONTyped,
  InlineResponse20028OrderTypesOutsideToJSON,
  InlineResponse20028TifTypes,
  InlineResponse20028TifTypesFromJSON,
  InlineResponse20028TifTypesFromJSONTyped,
  InlineResponse20028TifTypesToJSON,
} from "./";

/**
 *
 * @export
 * @interface InlineResponse20028Rules
 */
export interface InlineResponse20028Rules {
  /**
   *
   * @type {boolean}
   * @memberof InlineResponse20028Rules
   */
  algoEligible?: boolean;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20028Rules
   */
  error?: string;
  /**
   *
   * @type {Array<InlineResponse20028OrderTypes>}
   * @memberof InlineResponse20028Rules
   */
  orderTypes?: Array<InlineResponse20028OrderTypes>;
  /**
   *
   * @type {Array<InlineResponse20028IbalgoTypes>}
   * @memberof InlineResponse20028Rules
   */
  ibalgoTypes?: Array<InlineResponse20028IbalgoTypes>;
  /**
   *
   * @type {Array<InlineResponse20028FraqTypes>}
   * @memberof InlineResponse20028Rules
   */
  fraqTypes?: Array<InlineResponse20028FraqTypes>;
  /**
   *
   * @type {Array<InlineResponse20028CqtTypes>}
   * @memberof InlineResponse20028Rules
   */
  cqtTypes?: Array<InlineResponse20028CqtTypes>;
  /**
   * If object returned will provide the defaults based on user settings
   * @type {Array<InlineResponse20028OrderDefaults>}
   * @memberof InlineResponse20028Rules
   */
  orderDefaults?: Array<InlineResponse20028OrderDefaults>;
  /**
   *
   * @type {Array<InlineResponse20028OrderTypesOutside>}
   * @memberof InlineResponse20028Rules
   */
  orderTypesOutside?: Array<InlineResponse20028OrderTypesOutside>;
  /**
   * Default quantity
   * @type {number}
   * @memberof InlineResponse20028Rules
   */
  defaultSize?: number;
  /**
   * cash value
   * @type {number}
   * @memberof InlineResponse20028Rules
   */
  cashSize?: number;
  /**
   * increment quantity value
   * @type {number}
   * @memberof InlineResponse20028Rules
   */
  sizeIncrement?: number;
  /**
   *
   * @type {Array<InlineResponse20028TifTypes>}
   * @memberof InlineResponse20028Rules
   */
  tifTypes?: Array<InlineResponse20028TifTypes>;
  /**
   * Default time in force value
   * @type {string}
   * @memberof InlineResponse20028Rules
   */
  defaultTIF?: string;
  /**
   * Limit price
   * @type {number}
   * @memberof InlineResponse20028Rules
   */
  limitPrice?: number;
  /**
   * Stop price
   * @type {number}
   * @memberof InlineResponse20028Rules
   */
  stopprice?: number;
  /**
   * Order origin designation for US securities options and Options Clearing Corporation
   * @type {number}
   * @memberof InlineResponse20028Rules
   */
  orderOrigination?: number;
  /**
   * order preview required
   * @type {boolean}
   * @memberof InlineResponse20028Rules
   */
  preview?: boolean;
  /**
   *
   * @type {number}
   * @memberof InlineResponse20028Rules
   */
  displaySize?: number;
  /**
   * decimal places for fractional order size
   * @type {number}
   * @memberof InlineResponse20028Rules
   */
  fraqInt?: number;
  /**
   * Cash currency for the contract
   * @type {string}
   * @memberof InlineResponse20028Rules
   */
  cashCcy?: string;
  /**
   * Increment value for cash quantity
   * @type {number}
   * @memberof InlineResponse20028Rules
   */
  cashQtyIncr?: number;
  /**
   * Price Magnifier
   * @type {number}
   * @memberof InlineResponse20028Rules
   */
  priceMagnifier?: number;
  /**
   * trading negative price support
   * @type {boolean}
   * @memberof InlineResponse20028Rules
   */
  negativeCapable?: boolean;
  /**
   * Price increment value
   * @type {number}
   * @memberof InlineResponse20028Rules
   */
  increment?: number;
  /**
   * Number of digits for price increment
   * @type {number}
   * @memberof InlineResponse20028Rules
   */
  incrementDigits?: number;
}

export function InlineResponse20028RulesFromJSON(
  json: any
): InlineResponse20028Rules {
  return InlineResponse20028RulesFromJSONTyped(json, false);
}

export function InlineResponse20028RulesFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): InlineResponse20028Rules {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    algoEligible: !exists(json, "algoEligible")
      ? undefined
      : json["algoEligible"],
    error: !exists(json, "error") ? undefined : json["error"],
    orderTypes: !exists(json, "orderTypes")
      ? undefined
      : (json["orderTypes"] as Array<any>).map(
          InlineResponse20028OrderTypesFromJSON
        ),
    ibalgoTypes: !exists(json, "ibalgoTypes")
      ? undefined
      : (json["ibalgoTypes"] as Array<any>).map(
          InlineResponse20028IbalgoTypesFromJSON
        ),
    fraqTypes: !exists(json, "fraqTypes")
      ? undefined
      : (json["fraqTypes"] as Array<any>).map(
          InlineResponse20028FraqTypesFromJSON
        ),
    cqtTypes: !exists(json, "cqtTypes")
      ? undefined
      : (json["cqtTypes"] as Array<any>).map(
          InlineResponse20028CqtTypesFromJSON
        ),
    orderDefaults: !exists(json, "orderDefaults")
      ? undefined
      : (json["orderDefaults"] as Array<any>).map(
          InlineResponse20028OrderDefaultsFromJSON
        ),
    orderTypesOutside: !exists(json, "orderTypesOutside")
      ? undefined
      : (json["orderTypesOutside"] as Array<any>).map(
          InlineResponse20028OrderTypesOutsideFromJSON
        ),
    defaultSize: !exists(json, "defaultSize") ? undefined : json["defaultSize"],
    cashSize: !exists(json, "cashSize") ? undefined : json["cashSize"],
    sizeIncrement: !exists(json, "sizeIncrement")
      ? undefined
      : json["sizeIncrement"],
    tifTypes: !exists(json, "tifTypes")
      ? undefined
      : (json["tifTypes"] as Array<any>).map(
          InlineResponse20028TifTypesFromJSON
        ),
    defaultTIF: !exists(json, "defaultTIF") ? undefined : json["defaultTIF"],
    limitPrice: !exists(json, "limitPrice") ? undefined : json["limitPrice"],
    stopprice: !exists(json, "stopprice") ? undefined : json["stopprice"],
    orderOrigination: !exists(json, "orderOrigination")
      ? undefined
      : json["orderOrigination"],
    preview: !exists(json, "preview") ? undefined : json["preview"],
    displaySize: !exists(json, "displaySize") ? undefined : json["displaySize"],
    fraqInt: !exists(json, "fraqInt") ? undefined : json["fraqInt"],
    cashCcy: !exists(json, "cashCcy") ? undefined : json["cashCcy"],
    cashQtyIncr: !exists(json, "cashQtyIncr") ? undefined : json["cashQtyIncr"],
    priceMagnifier: !exists(json, "priceMagnifier")
      ? undefined
      : json["priceMagnifier"],
    negativeCapable: !exists(json, "negativeCapable")
      ? undefined
      : json["negativeCapable"],
    increment: !exists(json, "increment") ? undefined : json["increment"],
    incrementDigits: !exists(json, "incrementDigits")
      ? undefined
      : json["incrementDigits"],
  };
}

export function InlineResponse20028RulesToJSON(
  value?: InlineResponse20028Rules | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    algoEligible: value.algoEligible,
    error: value.error,
    orderTypes:
      value.orderTypes === undefined
        ? undefined
        : (value.orderTypes as Array<any>).map(
            InlineResponse20028OrderTypesToJSON
          ),
    ibalgoTypes:
      value.ibalgoTypes === undefined
        ? undefined
        : (value.ibalgoTypes as Array<any>).map(
            InlineResponse20028IbalgoTypesToJSON
          ),
    fraqTypes:
      value.fraqTypes === undefined
        ? undefined
        : (value.fraqTypes as Array<any>).map(
            InlineResponse20028FraqTypesToJSON
          ),
    cqtTypes:
      value.cqtTypes === undefined
        ? undefined
        : (value.cqtTypes as Array<any>).map(InlineResponse20028CqtTypesToJSON),
    orderDefaults:
      value.orderDefaults === undefined
        ? undefined
        : (value.orderDefaults as Array<any>).map(
            InlineResponse20028OrderDefaultsToJSON
          ),
    orderTypesOutside:
      value.orderTypesOutside === undefined
        ? undefined
        : (value.orderTypesOutside as Array<any>).map(
            InlineResponse20028OrderTypesOutsideToJSON
          ),
    defaultSize: value.defaultSize,
    cashSize: value.cashSize,
    sizeIncrement: value.sizeIncrement,
    tifTypes:
      value.tifTypes === undefined
        ? undefined
        : (value.tifTypes as Array<any>).map(InlineResponse20028TifTypesToJSON),
    defaultTIF: value.defaultTIF,
    limitPrice: value.limitPrice,
    stopprice: value.stopprice,
    orderOrigination: value.orderOrigination,
    preview: value.preview,
    displaySize: value.displaySize,
    fraqInt: value.fraqInt,
    cashCcy: value.cashCcy,
    cashQtyIncr: value.cashQtyIncr,
    priceMagnifier: value.priceMagnifier,
    negativeCapable: value.negativeCapable,
    increment: value.increment,
    incrementDigits: value.incrementDigits,
  };
}
