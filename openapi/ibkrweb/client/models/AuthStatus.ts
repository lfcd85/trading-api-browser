// @ts-nocheck
/* eslint-disable */
/**
 * Client Portal Web API
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
/**
 *
 * @export
 * @interface AuthStatus
 */
export interface AuthStatus {
  /**
   * Brokerage session is authenticated
   * @type {boolean}
   * @memberof AuthStatus
   */
  authenticated?: boolean
  /**
   * Connected to backend
   * @type {boolean}
   * @memberof AuthStatus
   */
  connected?: boolean
  /**
   * Brokerage session is competing, e.g. user is logged in to IBKR Mobile, WebTrader, TWS or other trading platforms.
   * @type {boolean}
   * @memberof AuthStatus
   */
  competing?: boolean
  /**
   * Authentication failed, why.
   * @type {string}
   * @memberof AuthStatus
   */
  fail?: string
  /**
   * System messages that may affect trading
   * @type {string}
   * @memberof AuthStatus
   */
  message?: string
  /**
   * Prompt messages that may affect trading or the account
   * @type {Array<string>}
   * @memberof AuthStatus
   */
  prompts?: Array<string>
}

export function AuthStatusFromJSON(json: any): AuthStatus {
  return AuthStatusFromJSONTyped(json, false)
}

export function AuthStatusFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): AuthStatus {
  if (json === undefined || json === null) {
    return json
  }
  return {
    authenticated: !exists(json, 'authenticated')
      ? undefined
      : json['authenticated'],
    connected: !exists(json, 'connected') ? undefined : json['connected'],
    competing: !exists(json, 'competing') ? undefined : json['competing'],
    fail: !exists(json, 'fail') ? undefined : json['fail'],
    message: !exists(json, 'message') ? undefined : json['message'],
    prompts: !exists(json, 'prompts') ? undefined : json['prompts'],
  }
}

export function AuthStatusToJSON(value?: AuthStatus | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    authenticated: value.authenticated,
    connected: value.connected,
    competing: value.competing,
    fail: value.fail,
    message: value.message,
    prompts: value.prompts,
  }
}
