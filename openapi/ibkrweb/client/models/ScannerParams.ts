// @ts-nocheck
/* eslint-disable */
/**
 * Client Portal Web API
 * Client Poral Web API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  ScannerParamsInstrumentList,
  ScannerParamsInstrumentListFromJSON,
  ScannerParamsInstrumentListFromJSONTyped,
  ScannerParamsInstrumentListToJSON,
  ScannerParamsLocationTree,
  ScannerParamsLocationTreeFromJSON,
  ScannerParamsLocationTreeFromJSONTyped,
  ScannerParamsLocationTreeToJSON,
  ScannerParamsScanTypeList,
  ScannerParamsScanTypeListFromJSON,
  ScannerParamsScanTypeListFromJSONTyped,
  ScannerParamsScanTypeListToJSON,
} from "./";

/**
 *
 * @export
 * @interface ScannerParams
 */
export interface ScannerParams {
  /**
   *
   * @type {ScannerParamsInstrumentList}
   * @memberof ScannerParams
   */
  instrumentList?: ScannerParamsInstrumentList;
  /**
   *
   * @type {ScannerParamsLocationTree}
   * @memberof ScannerParams
   */
  locationTree?: ScannerParamsLocationTree;
  /**
   * Contains list of filters supported for the scanner
   * @type {Array<object>}
   * @memberof ScannerParams
   */
  filterList?: Array<object>;
  /**
   *
   * @type {ScannerParamsScanTypeList}
   * @memberof ScannerParams
   */
  scanTypeList?: ScannerParamsScanTypeList;
}

export function ScannerParamsFromJSON(json: any): ScannerParams {
  return ScannerParamsFromJSONTyped(json, false);
}

export function ScannerParamsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ScannerParams {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    instrumentList: !exists(json, "InstrumentList")
      ? undefined
      : ScannerParamsInstrumentListFromJSON(json["InstrumentList"]),
    locationTree: !exists(json, "LocationTree")
      ? undefined
      : ScannerParamsLocationTreeFromJSON(json["LocationTree"]),
    filterList: !exists(json, "FilterList") ? undefined : json["FilterList"],
    scanTypeList: !exists(json, "ScanTypeList")
      ? undefined
      : ScannerParamsScanTypeListFromJSON(json["ScanTypeList"]),
  };
}

export function ScannerParamsToJSON(value?: ScannerParams | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    InstrumentList: ScannerParamsInstrumentListToJSON(value.instrumentList),
    LocationTree: ScannerParamsLocationTreeToJSON(value.locationTree),
    FilterList: value.filterList,
    ScanTypeList: ScannerParamsScanTypeListToJSON(value.scanTypeList),
  };
}
